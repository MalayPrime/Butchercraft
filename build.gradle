buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            name = "Parchment"
            url = 'https://maven.parchmentmc.org'
        }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'org.parchmentmc', name: 'librarian', version: '1.+'
		classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = '2.2.2a'
group = 'com.lance5057.butchercraft' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'butchercraft'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 8 to end users, so your mod should target Java 8.

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: '2022.10.16-1.19.2'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
     accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                butchercraft {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'
			property 'mixin.env.remapRefMap', 'true'

            mods {
                butchercraft {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")
            environment 'target', 'fmluserdevdata'
            properties 'fml.earlyprogresswindow': 'false'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            args '--all', '--output', file('src/generated/resources/'),
                    '--mod', 'butchercraft', '--reports',
                    '--existing', sourceSets.main.resources.srcDirs[0]
        }
    }
}

sourceSets {
    main {
        resources {
            srcDirs = [
                    "$rootDir/src/main/resources",
                    "$rootDir/src/generated/resources"
            ]
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.19.2-43.1.47'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    implementation fg.deobf("curse.maven:farmersdelight-398521:3999157")

    compileOnly fg.deobf("mezz.jei:jei-1.19.2-forge-api:11.2.0.246")
    runtimeOnly fg.deobf("mezz.jei:jei-1.19.2-forge:11.2.0.246")
}

repositories {
    maven { url "https://maven.jaackson.me" }
    maven { url "https://www.cursemaven.com" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
    maven { url "https://modmaven.k-4u.nl" }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "butchercraft",
            "Specification-Vendor": "examplemodsareus",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"examplemodsareus",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
			
        }
		   
    }
}
